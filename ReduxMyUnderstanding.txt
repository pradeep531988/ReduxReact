1. Redux: State management
2. We use ReduxStore for storing all the states
3. createStore Method is used to create new store and we pass Reducer for it
4. var store = createStore(rootReducer)
5. What is a Reducer: This is responsible for providing states. We dont create it manually.
6. State must always return from reducer.
7. Reducer is a javascript function which accepts two parameters the current state and the action.
8. Third principal says state is immutable cannot be changed in place.
9. This is why reducer is pure function, which means for every give same input, you get the same output.
10. In React we can set state using this.State( { name="",value=""}); this is not possible with redux.
11. Sample Reducer:
    const initialState = {
		articles = []
	}
	
	const rootReducer = ( state = initialState, action) => state;
	export default rootReducer;
	The above code does not action just create initial state and return;
	
12. Reducer are the mainly responsible for producing state, but how will reducer know when to produce next 
    state. The only way to change the state is by sending the signal to store. So the signal is called Action.
	Dispatching an action is the process of sending signal.
	So as per the earlier point state is immutable, so how do you change the state, here the state will not be changed.
	Instead a new state will be cloned from current state and new values are updated.
	
13. The reassuring thing is that Redux actions are nothing more than Javascript objects. This is what an action looks like:
    {
		type: 'ADD_ARTICLE',
		payload: { name: 'React Redux Tutorial', id: 1 }
	}
	
14. It is a best pratice to wrap every action within a function. Such function is an action creator.
    // src/js/constants/action-types.js
	export const ADD_ARTICLE = "ADD_ARTICLE";

	// actions
	import { ADD_ARTICLE } from "../constants/action-types";
	const article =  { name: 'React Redux Tutorial', id: 1 }
    export const addArticle = article => ({ type: ADD_ARTICLE, payload: article });	
	
15. Since strings are prone to typos and duplicates it’s better to have action types declared as constants.

16. The Redux store is like a brain: it’s in charge for orchestrating all the moving parts in Redux
	The state of the application lives as a single, immutable object within the store
	As soon as the store receives an action it triggers a reducer
	The reducer returns the next state
	A reducer is a Javascript function taking two parameters: the state and the action.
    A reducer function may have a switch statement (but I prefer using if).
	
17. The reducer calculates the next state depending on the action type. Moreover, it should return at least the initial state when no action type matches.
    switch (action.type) {
    case ADD_ARTICLE:
      return { ...state, articles: [...state.articles, action.payload] };
    default:
      return state;
	}
	
18. import { ADD_ARTICLE } from "../constants/action-types";
	const initialState = {
	  articles: []
	};
	const rootReducer = (state = initialState, action) => {
	  switch (action.type) {
		case ADD_ARTICLE:
		  state.articles.push(action.payload);
		  return state;
		default:
		  return state;
	  }
	};
	export default rootReducer;
	
19. Although it’s valid code the above reducer breaks the main Redux principle: immutability.
    So refactor it to:
	import { ADD_ARTICLE } from "../constants/action-types";
	const initialState = {
	  articles: []
	};
	const rootReducer = (state = initialState, action) => {
	  switch (action.type) {
		case ADD_ARTICLE:
		  return { ...state, articles: state.articles.concat(action.payload) };
		default:
		  return state;
	  }
	};
	export default rootReducer;
	Making our reducer compliant is easy. Using Array.prototype.concat in place of Array.prototype.push 
	is enough to keep the initial array immutable
	
20. We’re not done yet! With the spread operator we can make our reducer even better:
    import { ADD_ARTICLE } from "../constants/action-types";
	const initialState = {
	  articles: []
	};
	const rootReducer = (state = initialState, action) => {
	  switch (action.type) {
		case ADD_ARTICLE:
		  return { ...state, articles: [...state.articles, action.payload] };
		default:
		  return state;
	  }
	};
	export default rootReducer;
	
21. In the example above the initial state is left utterly untouched.
	The initial articles array doesn’t change in place.
	The initial state object doesn’t change as well. The resulting state is a copy of the initial state.
	Using concat(), slice(), and …spread for arrays
	Using Object.assign() and …spread for objects

22. npm i --save-dev babel-plugin-transform-object-rest-spread
    Open up .babelrcand update the configuration:

	{
		"presets": ["env", "react"],
		"plugins": ["transform-object-rest-spread"]
	} 
	 
23. Redux protip: the reducer will grow as your app will become bigger. 
    You can split a big reducer into separate functions and combine them with combineReducers.
	
24. Redux itself is a small library (2KB). The Redux store exposes a simple API for managing the state. The most important methods are:

	getState for accessing the current state of the application
	dispatch for dispatching an action
	subscribe for listening on state changes
	
25. Example:
    import store from "../js/store/index";
	import { addArticle } from "../js/actions/index";
	window.store = store;
	window.addArticle = addArticle;
    
	store.getState() : Return {articles: Array(0)}
    To make things interesting we can listen for state updates with subscribe.

The subscribe method accepts a callback that will fire whenever an action is dispatched. 
Dispatching an action means notifying the store that we want to change the state.
store.subscribe(() => console.log('Look ma, Redux!!'))

26. To change the state in Redux we need to dispatch an action. To dispatch an action you have to call the dispatch method.

store.dispatch( addArticle({ name: 'React Redux Tutorial for Beginners', id: 1 }) )

27. React Redux tutorial: connecting React with Redux
I knew how to access the current state with getState.
I knew how to dispatch an action with dispatch
I knew how to listen for state changes with subscribe

28. npm i react-redux --save-dev
	To demonstrate how React and Redux work together we’ll build a super simple application. The application is made of the following components:

	an App component
	a List component for displaying articles
	a Form component for adding new articles
	
29. react-redux is a Redux binding for React. It’s a small library for connecting Redux and React in an efficient way.
    The most important method you’ll work with is connect
	What does react-redux’s connect do? Unsurprisingly it connects a React component with the Redux store.

30. You will use connect with two or three arguments depending on the use case. The fundamental things to know are:
	the mapStateToProps function
	the mapDispatchToProps function
	
31. What does mapStateToProps do in react-redux? mapStateToProps does exactly what its name suggests:
   it connects a part of the Redux state to the props of a React component.
   By doing so a connected React component will have access to the exact part of the store it needs.

   What does mapDispatchToProps do in react-redux? mapDispatchToProps does something similar, 
   but for actions. mapDispatchToProps connects Redux actions to React props. 
   This way a connected React component will be able to dispatch actions
   
32. To start off connecting Redux with React we’re going to use Provider.
    Provider is an high order component coming from react-redux.
	Provider wraps up your React application and makes it aware of the entire Redux’s store.
Why so? We saw that in Redux the store manages everything. React must talk to the store for accessing the state and dispatching actions.

33. Sample Provider for React to access:
	import React from "react";
	import { render } from "react-dom";
	import { Provider } from "react-redux";
	import store from "./store/index";
	import App from "./components/App";
	render(
	  <Provider store={store}>
		<App />
	  </Provider>,
	  document.getElementById("app")
	);
	
34. App.js
    import React from "react";
	import List from "./List";
	const App = () => (
		  <List />
	);
	export default App;
	
List component and Redux state
A brief recap: the key for connecting a React component with Redux is connect.
Connect takes at least one argument.
Since we want List to get a list of articles it’s a matter of connecting state.articleswith the component. How? With mapStateToProps.

35. List.js
	// src/js/components/List.js
	import React from "react";
	import { connect } from "react-redux";
	const mapStateToProps = state => {
	  return { articles: state.articles };
	};
	const ConnectedList = ({ articles }) => (
	  <ul className="list-group list-group-flush">
		{articles.map(el => (
		  <li className="list-group-item" key={el.id}>
			{el.title}
		  </li>
		))}
	  </ul>
	);
	const List = connect(mapStateToProps)(ConnectedList);
	export default List;
	
36. The List component receives the prop articleswhich is a copy of the articlesarray. 
    Such array lives inside the Redux state we created earlier. It comes from the reducer:

	const initialState = {
	  articles: []
	};
	const rootReducer = (state = initialState, action) => {
	  switch (action.type) {
		case ADD_ARTICLE:
		  return { ...state, articles: [...state.articles, action.payload] };
		default:
		  return state;
	  }
	};
	
	https://www.sohamkamani.com/blog/2017/03/31/react-redux-connect-explained/
	
37. If you have worked with redux before, you know that its functionality revolves around a “store”, which is where the state of the application lives. 
There is no way anyone can directly modify the store. 
The only way to do so is through reducers, and the only way to trigger reducers is to dispatch actions. So ultimately :
To change data, we need to dispatch an action

38. On the other hand, when we want to retrieve data, we do not get it directly from the store. 
Instead, we get a snapshot of the data in the store at any point in time using store.getState() , 
which gives us the “state” of the application as on the time at which we called the getState method.

39. We can connect our component to store using connect.
	import { connect } from 'react-redux'

	const TodoItem = ({ todo, destroyTodo }) => {
	  return (
		<div>
		  {todo.text}
		  <span onClick={destroyTodo}> x </span>
		</div>
	  )
	}

	const mapStateToProps = state => {
	  return {
		todo: state.todos[0]
	  }
	}

	const mapDispatchToProps = dispatch => {
	  return {
		destroyTodo: () =>
		  dispatch({
			type: 'DESTROY_TODO'
		  })
	  }
	}

	export default connect(
	  mapStateToProps,
	  mapDispatchToProps
	)(TodoItem)
	
40. The component contains some logic for updating the local state upon a form submission.
Plus it receives a Redux action as prop. This way it can update the global state by dispatching the addArticle action.

	// src/js/components/Form.js
	import React, { Component } from "react";
	import { connect } from "react-redux";
	import uuidv1 from "uuid";
	import { addArticle } from "../actions/index";
	const mapDispatchToProps = dispatch => {
	  return {
		addArticle: article => dispatch(addArticle(article))
	  };
	};
	class ConnectedForm extends Component {
	  constructor() {
		super();
		this.state = {
		  title: ""
		};
		this.handleChange = this.handleChange.bind(this);
		this.handleSubmit = this.handleSubmit.bind(this);
	  }
	  handleChange(event) {
		this.setState({ [event.target.id]: event.target.value });
	  }
	  handleSubmit(event) {
		event.preventDefault();
		const { title } = this.state;
		const id = uuidv1();
		this.props.addArticle({ title, id }); // This is redux state updating.
		this.setState({ title: "" });
	  }
	  render() {
		const { title } = this.state;
		return (
		  <form onSubmit={this.handleSubmit}>
			<div className="form-group">
			  <label htmlFor="title">Title</label>
			  <input
				type="text"
				className="form-control"
				id="title"
				value={title}
				onChange={this.handleChange}
			  />
			</div>
			<button type="submit" className="btn btn-success btn-lg">
			  SAVE
			</button>
		  </form>
		);
	  }
	}
	const Form = connect(null, mapDispatchToProps)(ConnectedForm);
	export default Form;

41. In the above example we have Redux and also we have local state.
Even when using Redux it is totally fine to have stateful components.
Not every piece of the application’s state should go inside Redux.
In this example I don’t want any other component to be aware of the Form local state.
The component contains some logic for updating the local state upon a form submission.
Plus it receives a Redux action as prop. This way it can update the global state by dispatching the addArticle action.
Besides mapDispatchToProps and connect it’s standard React stuff.
mapDispatchToProps connects Redux actions to React props. This way a connected component is able to dispatch actions.

// ...
  handleSubmit(event) {
    event.preventDefault();
    const { title } = this.state;
    const id = uuidv1();
    this.props.addArticle({ title, id }); // Relevant Redux part!!
// 

42. Side note: the first argument for connect must be nullwhen mapStateToProps is absent like in the Form example. 
Otherwise you’ll get TypeError: dispatch is not a function.

npm i uuid --save-dev
